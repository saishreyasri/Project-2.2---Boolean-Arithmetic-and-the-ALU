// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //// Replace this comment with your code.
	Mux16(a[0..15]=x, b[0..15]=false, sel=zx, out[0..15]= xzx);
   Not16(in[0..15]=xzx,out[0..15]=nxzx);
   Mux16(a[0..15]=xzx,b[0..15]=nxzx,sel=nx, out[0..15]=xout );

   Mux16(a[0..15]=y, b[0..15]=false, sel=zy, out[0..15]= yzy);
   Not16(in[0..15]=yzy,out[0..15]=nyzy);
   Mux16(a[0..15]=yzy,b[0..15]=nyzy,sel=ny, out[0..15]=yout );

   And16(a[0..15]=xout,b[0..15]=yout,out[0..15]=outand);
   Add16(a[0..15]=xout,b[0..15]=yout,out[0..15]=outadd);
   Mux16(a[0..15]=outand,b[0..15]=outadd,sel=f, out[0..15]=fout);

   Not16(in[0..15]=fout, out=nfout);
   Mux16(a[0..15]=fout,b[0..15]=nfout,sel=no,out=out, out[15]=ng, out[0..7]=zro1,out[8..15]=zro2);

  Or8Way(in[0..7]=zro1 ,out=zr1);
  Or8Way(in[0..7]=zro2 ,out=zr2);
  Or(a=zr1, b=zr2, out=zro);
  Not(in=zro,out=zr);
}